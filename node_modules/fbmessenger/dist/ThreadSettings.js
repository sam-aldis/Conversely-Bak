'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PersistentMenu = exports.PersistentMenuItem = exports.GetStartedButton = exports.GreetingText = undefined;

var _constants = require('./constants');

class GreetingText {
  constructor(text) {
    this.text = text;

    return {
      setting_type: 'greeting',
      greeting: {
        text: this.text
      }
    };
  }
}

class GetStartedButton {
  constructor(payload) {
    this.payload = payload;

    return {
      setting_type: 'call_to_actions',
      thread_state: 'new_thread',
      call_to_actions: [{
        payload: this.payload
      }]
    };
  }
}

class PersistentMenuItem {
  constructor(_ref) {
    var type = _ref.type,
        title = _ref.title,
        _ref$url = _ref.url,
        url = _ref$url === undefined ? '' : _ref$url,
        _ref$payload = _ref.payload,
        payload = _ref$payload === undefined ? '' : _ref$payload,
        _ref$webview_height_r = _ref.webview_height_ratio,
        webview_height_ratio = _ref$webview_height_r === undefined ? '' : _ref$webview_height_r,
        _ref$messenger_extens = _ref.messenger_extensions,
        messenger_extensions = _ref$messenger_extens === undefined ? false : _ref$messenger_extens;

    if (_constants.PERSISTENT_MENU_TYPES.indexOf(type) === -1) {
      throw new Error('Invalid type provided.');
    }

    if (title.length > 30) {
      throw new Error('Title cannot be longer 30 characters.');
    }

    if (payload && payload.length > 1000) {
      throw new Error('Payload cannot be longer 1000 characters.');
    }

    if (type === 'web_url' && !url) {
      throw new Error('`url` must be supplied for `web_url` type menu items.');
    }

    if (type === 'postback' && !payload) {
      throw new Error('`payload` must be supplied for `postback` type menu items.');
    }

    if (webview_height_ratio && _constants.WEBVIEW_HEIGHT_RATIOS.indexOf(webview_height_ratio) === -1) {
      throw new Error('Invalid `webview_height_ratio` provided.');
    }

    this.type = type;
    this.title = title;
    this.url = url;
    this.payload = payload;
    this.webview_height_ratio = webview_height_ratio;
    this.messenger_extensions = Boolean(messenger_extensions);

    var res = {
      type: this.type,
      title: this.title
    };

    if (this.url && this.type === 'web_url') {
      res.url = this.url;
    }

    if (this.payload && this.type === 'postback') {
      res.payload = this.payload;
    }

    if (this.webview_height_ratio) {
      res.webview_height_ratio = this.webview_height_ratio;
    }

    if (this.messenger_extensions) {
      res.messenger_extensions = this.messenger_extensions;
    }

    return res;
  }
}

class PersistentMenu {
  constructor(menuItems) {
    if (!Array.isArray(menuItems)) {
      throw new Error('You must pass an array of PersistentMenuItem objects.');
    }

    if (menuItems.length > 5) {
      throw new Error('You cannot have more than 5 menu items.');
    }

    this.menuItems = menuItems;

    return {
      setting_type: 'call_to_actions',
      thread_state: 'existing_thread',
      call_to_actions: this.menuItems
    };
  }
}

exports.GreetingText = GreetingText;
exports.GetStartedButton = GetStartedButton;
exports.PersistentMenuItem = PersistentMenuItem;
exports.PersistentMenu = PersistentMenu;