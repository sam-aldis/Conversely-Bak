'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.PersistentMenuItem = exports.PersistentMenu = exports.GetStartedButton = exports.GreetingText = exports.QuickReply = exports.QuickReplies = exports.ListTemplate = exports.ReceiptTemplate = exports.GenericTemplate = exports.ButtonTemplate = exports.File = exports.Video = exports.Audio = exports.Image = exports.Element = exports.DefaultAction = exports.Adjustment = exports.Summary = exports.Address = exports.Button = exports.Text = exports.Messenger = undefined;

var _events = require('events');

var _events2 = _interopRequireDefault(_events);

var _url = require('url');

var NodeUrl = _interopRequireWildcard(_url);

var _nodeFetch = require('node-fetch');

var _nodeFetch2 = _interopRequireDefault(_nodeFetch);

var _Text = require('./elements/Text');

var _Text2 = _interopRequireDefault(_Text);

var _Button = require('./elements/Button');

var _Button2 = _interopRequireDefault(_Button);

var _Address = require('./elements/Address');

var _Address2 = _interopRequireDefault(_Address);

var _Element = require('./elements/Element');

var _Element2 = _interopRequireDefault(_Element);

var _Summary = require('./elements/Summary');

var _Summary2 = _interopRequireDefault(_Summary);

var _Adjustment = require('./elements/Adjustment');

var _Adjustment2 = _interopRequireDefault(_Adjustment);

var _DefaultAction = require('./elements/DefaultAction');

var _DefaultAction2 = _interopRequireDefault(_DefaultAction);

var _Image = require('./attachments/Image');

var _Image2 = _interopRequireDefault(_Image);

var _Audio = require('./attachments/Audio');

var _Audio2 = _interopRequireDefault(_Audio);

var _Video = require('./attachments/Video');

var _Video2 = _interopRequireDefault(_Video);

var _File = require('./attachments/File');

var _File2 = _interopRequireDefault(_File);

var _ButtonTemplate = require('./templates/ButtonTemplate');

var _ButtonTemplate2 = _interopRequireDefault(_ButtonTemplate);

var _GenericTemplate = require('./templates/GenericTemplate');

var _GenericTemplate2 = _interopRequireDefault(_GenericTemplate);

var _ReceiptTemplate = require('./templates/ReceiptTemplate');

var _ReceiptTemplate2 = _interopRequireDefault(_ReceiptTemplate);

var _ListTemplate = require('./templates/ListTemplate');

var _ListTemplate2 = _interopRequireDefault(_ListTemplate);

var _constants = require('./constants');

var _QuickReplies = require('./QuickReplies');

var _ThreadSettings = require('./ThreadSettings');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

class Messenger extends _events2.default {
  constructor() {
    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    super();

    if (!Object.prototype.hasOwnProperty.call(opts, 'pageAccessToken')) {
      throw new Error('PAGE_ACCESS_TOKEN is missing.');
    }

    this.pageAccessToken = opts.pageAccessToken;
  }

  handle(payload) {
    var _this = this;

    var entries = payload.entry;
    entries.forEach(function (entry) {
      entry.messaging.forEach(function (message) {
        if (message.message) {
          _this.emit('message', message);
        }
        if (message.delivery) {
          _this.emit('delivery', message);
        }
        if (message.read) {
          _this.emit('read', message);
        }
        if (message.postback) {
          _this.emit('postback', message);
        }
        if (message.account_linking) {
          _this.emit('account_linking', message);
        }
        if (message.optin) {
          _this.emit('optin', message);
        }
        if (message.referral) {
          _this.emit('referral', message);
        }
        if (message.payment) {
          _this.emit('payment', message);
        }
        if (message.checkout_update) {
          _this.emit('checkout_update', message);
        }
      });
    });
  }

  buildURL(pathname, queryParams) {
    var defaultqueryParams = {
      access_token: this.pageAccessToken
    };
    var query = Object.assign({}, queryParams, defaultqueryParams);
    var obj = {
      protocol: 'https',
      host: 'graph.facebook.com',
      pathname: `/v2.8/${pathname}`,
      query
    };

    return NodeUrl.format(obj);
  }

  static handleError(result) {
    /* istanbul ignore if */
    if ({}.hasOwnProperty.call(result, 'error')) {
      switch (result.error.code) {
        case 4:
          if (result.error.subcode === 2018022) {
            throw new Error('Too many send requests to phone numbers.');
          }
          break;
        case 1200:
          throw new Error('Temporary send message failure. Please try again later.');
        case 613:
          throw new Error('Calls to this API have exceeded the rate limit.');
        case 100:
          switch (result.error.subcode) {
            case 2018109:
              throw new Error('Attachment size exceeds allowable limit.');
            case 2018001:
              throw new Error('No matching user found.');
            default:
              throw new Error('Invalid fbid.');
          }
        case 10:
          switch (result.error.subcode) {
            case 2018065:
              throw new Error('This message is sent outside of allowed window. You need page_messaging_subscriptions permission to be able to do it.');
            case 2018108:
            default:
              throw new Error('This Person Cannot Receive Messages: This person isn\'t receiving messages from you right now.');
          }
        case 200:
          switch (result.error.subcode) {
            case 2018028:
              throw new Error('Cannot message users who are not admins, developers or testers of the app until pages_messaging permission is reviewed and the app is live.');
            case 2018027:
              throw new Error('Cannot message users who are not admins, developers or testers of the app until pages_messaging_phone_number permission is reviewed and the app is live.');
            case 2018021:
              throw new Error('Requires phone matching access fee to be paid by this page unless the recipient user is an admin, developer, or tester of the app.');
            default:
              break;
          }
          break;
        case 190:
          throw new Error('Invalid OAuth access token.');
        case 10303:
          throw new Error('Invalid account_linking_token.');
        default:
          throw new Error('Unknown error occurred.');
      }
    }
    return result;
  }

  get(url) {
    var _this2 = this;

    return (0, _nodeFetch2.default)(url, {
      method: 'GET',
      headers: {
        'Content-Type': 'application/json'
      }
    }).then(function (response) {
      return response.json();
    }).then(function (res) {
      return _this2.constructor.handleError(res);
    });
  }

  post(url) {
    var _this3 = this;

    var body = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    return (0, _nodeFetch2.default)(url, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(body)
    }).then(function (response) {
      return response.json();
    }).then(function (res) {
      return _this3.constructor.handleError(res);
    });
  }

  delete(url, body) {
    var _this4 = this;

    return (0, _nodeFetch2.default)(url, {
      method: 'DELETE',
      headers: {
        'Content-Type': 'application/json'
      },
      body: JSON.stringify(body)
    }).then(function (response) {
      return response.json();
    }).then(function (res) {
      return _this4.constructor.handleError(res);
    });
  }

  getUser(id) {
    if (!id) {
      throw new Error('A user ID is required.');
    }

    var url = this.buildURL(id, {
      fields: 'first_name,last_name,profile_pic,locale,timezone,gender,is_payment_enabled'
    });

    return this.get(url);
  }

  send(payload, id) {
    if (!id) {
      throw new Error('A user ID is required.');
    }

    var url = this.buildURL('me/messages');
    var body = {
      recipient: { id },
      message: payload
    };

    return this.post(url, body);
  }

  senderAction(senderAction, id) {
    if (_constants.SENDER_ACTIONS.indexOf(senderAction) === -1) {
      throw new Error('Invalid sender_action provided.');
    }

    if (!id) {
      throw new Error('A user ID is required.');
    }

    var url = this.buildURL('me/messages');
    var body = {
      recipient: { id },
      sender_action: senderAction
    };

    return this.post(url, body);
  }

  setThreadSetting(payload) {
    var url = this.buildURL('me/thread_settings');

    return this.post(url, payload);
  }

  subscribeAppToPage() {
    var url = this.buildURL('me/subscribed_apps');

    return this.post(url);
  }

  deleteThreadSetting(body) {
    var url = this.buildURL('me/thread_settings');

    return this.delete(url, body);
  }

  deleteGetStarted() {
    return this.deleteThreadSetting({
      setting_type: 'call_to_actions',
      thread_state: 'new_thread'
    });
  }

  deleteGreetingText() {
    return this.deleteThreadSetting({
      setting_type: 'greeting'
    });
  }

  deletePersistentMenu() {
    return this.deleteThreadSetting({
      setting_type: 'call_to_actions',
      thread_state: 'existing_thread'
    });
  }

  linkAccount(accountLinkingToken) {
    var url = this.buildURL('me', {
      fields: 'recipient',
      account_linking_token: accountLinkingToken
    });

    return this.get(url);
  }

  unlinkAccount(psid) {
    var url = this.buildURL('me/unlink_accounts');
    var body = { psid };

    return this.post(url, body);
  }

  updateWhitelistedDomains(action_type, domains) {
    if (!Array.isArray(domains)) {
      throw new Error('An array of domains must be provided');
    }

    var url = this.buildURL('me/thread_settings');
    var body = {
      setting_type: 'domain_whitelisting',
      domain_action_type: action_type,
      whitelisted_domains: domains
    };

    return this.post(url, body);
  }

  addWhitelistedDomain(domain) {
    if (!domain) {
      throw new Error('A domain must be provided');
    }

    return this.updateWhitelistedDomains('add', [domain]);
  }

  addWhitelistedDomains(domains) {
    if (!domains) {
      throw new Error('An array of domains must be provided');
    }

    return this.updateWhitelistedDomains('add', domains);
  }

  removeWhitelistedDomain(domain) {
    if (!domain) {
      throw new Error('A domain must be provided');
    }

    return this.updateWhitelistedDomains('remove', [domain]);
  }

  removeWhitelistedDomains(domains) {
    if (!domains) {
      throw new Error('An array of domains must be provided');
    }

    return this.updateWhitelistedDomains('remove', domains);
  }
}

exports.Messenger = Messenger;
exports.Text = _Text2.default;
exports.Button = _Button2.default;
exports.Address = _Address2.default;
exports.Summary = _Summary2.default;
exports.Adjustment = _Adjustment2.default;
exports.DefaultAction = _DefaultAction2.default;
exports.Element = _Element2.default;
exports.Image = _Image2.default;
exports.Audio = _Audio2.default;
exports.Video = _Video2.default;
exports.File = _File2.default;
exports.ButtonTemplate = _ButtonTemplate2.default;
exports.GenericTemplate = _GenericTemplate2.default;
exports.ReceiptTemplate = _ReceiptTemplate2.default;
exports.ListTemplate = _ListTemplate2.default;
exports.QuickReplies = _QuickReplies.QuickReplies;
exports.QuickReply = _QuickReplies.QuickReply;
exports.GreetingText = _ThreadSettings.GreetingText;
exports.GetStartedButton = _ThreadSettings.GetStartedButton;
exports.PersistentMenu = _ThreadSettings.PersistentMenu;
exports.PersistentMenuItem = _ThreadSettings.PersistentMenuItem;