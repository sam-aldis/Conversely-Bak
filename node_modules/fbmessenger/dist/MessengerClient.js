'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

var _url = require('url');

var _url2 = _interopRequireDefault(_url);

var _nodeFetch = require('node-fetch');

var _nodeFetch2 = _interopRequireDefault(_nodeFetch);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var MessengerClient = function () {
  function MessengerClient(pageAccessToken) {
    _classCallCheck(this, MessengerClient);

    this.pageAccessToken = pageAccessToken;
  }

  _createClass(MessengerClient, [{
    key: 'getUser',
    value: function getUser(id) {
      var finalUrl = this.constructor.buildURL(id, {
        fields: 'first_name,last_name,profile_pic,locale,timezone,gender',
        access_token: this.pageAccessToken
      });

      return (0, _nodeFetch2.default)(finalUrl).then(function (response) {
        return response.json();
      });
    }
  }, {
    key: 'send',
    value: function send(payload, id) {
      var finalUrl = this.constructor.buildURL('me/messages', {
        access_token: this.pageAccessToken
      });
      return (0, _nodeFetch2.default)(finalUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          recipient: { id: id },
          message: payload
        })
      }).then(function (response) {
        return response.json();
      });
    }
  }, {
    key: 'subscribeAppToPage',
    value: function subscribeAppToPage() {
      var finalUrl = this.constructor.buildURL('me/subscribed_apps', {
        access_token: this.pageAccessToken
      });
      return (0, _nodeFetch2.default)(finalUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        }
      }).then(function (response) {
        return response.json();
      });
    }
  }, {
    key: 'setThreadSetting',
    value: function setThreadSetting(payload) {
      var finalUrl = this.constructor.buildURL('me/thread_settings', {
        access_token: this.pageAccessToken
      });
      return (0, _nodeFetch2.default)(finalUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(payload)
      }).then(function (response) {
        return response.json();
      });
    }
  }, {
    key: 'deleteThreadSetting',
    value: function deleteThreadSetting(body) {
      var finalUrl = this.constructor.buildURL('me/thread_settings', {
        access_token: this.pageAccessToken
      });
      return (0, _nodeFetch2.default)(finalUrl, {
        method: 'DELETE',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(body)
      }).then(function (response) {
        return response.json();
      });
    }
  }, {
    key: 'deleteGetStarted',
    value: function deleteGetStarted() {
      return this.deleteThreadSetting({
        setting_type: 'call_to_actions',
        thread_state: 'new_thread'
      });
    }
  }, {
    key: 'deleteGreetingText',
    value: function deleteGreetingText() {
      return this.deleteThreadSetting({
        setting_type: 'greeting'
      });
    }
  }, {
    key: 'deletePersistentMenu',
    value: function deletePersistentMenu() {
      return this.deleteThreadSetting({
        setting_type: 'call_to_actions',
        thread_state: 'existing_thread'
      });
    }
  }, {
    key: 'linkAccount',
    value: function linkAccount(accountLinkingToken) {
      var finalUrl = this.constructor.buildURL('me', {
        access_token: this.pageAccessToken,
        fields: 'recipient',
        account_linking_token: accountLinkingToken
      });
      return (0, _nodeFetch2.default)(finalUrl, {
        headers: {
          'Content-Type': 'application/json'
        }
      }).then(function (response) {
        return response.json();
      });
    }
  }, {
    key: 'unlinkAccount',
    value: function unlinkAccount(psid) {
      var finalUrl = this.constructor.buildURL('me/unlink_accounts', {
        access_token: this.pageAccessToken
      });
      return (0, _nodeFetch2.default)(finalUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          psid: psid
        })
      }).then(function (response) {
        return response.json();
      });
    }
  }, {
    key: 'senderAction',
    value: function senderAction(_senderAction, id) {
      var actions = ['mark_seen', 'typing_on', 'typing_off'];

      if (actions.indexOf(_senderAction) === -1) {
        throw new Error('Invalid sender_action provided.');
      }

      var finalUrl = this.constructor.buildURL('me/messages', {
        access_token: this.pageAccessToken
      });

      return (0, _nodeFetch2.default)(finalUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          recipient: { id: id },
          sender_action: _senderAction
        })
      }).then(function (response) {
        return response.json();
      });
    }
  }, {
    key: 'updateWhitelistedDomains',
    value: function updateWhitelistedDomains(action_type, domains) {
      var finalUrl = this.constructor.buildURL('me/thread_settings', {
        access_token: this.pageAccessToken
      });
      return (0, _nodeFetch2.default)(finalUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify({
          setting_type: 'domain_whitelisting',
          domain_action_type: action_type,
          whitelisted_domains: domains
        })
      }).then(function (response) {
        return response.json();
      });
    }
  }], [{
    key: 'buildURL',
    value: function buildURL(pathname, query) {
      var urlObject = {
        protocol: 'https',
        host: 'graph.facebook.com',
        pathname: '/v2.8/' + pathname,
        query: query
      };
      return _url2.default.format(urlObject);
    }
  }]);

  return MessengerClient;
}();

exports.default = MessengerClient;